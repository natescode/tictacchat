#!/usr/bin/env node
var debug = require("debug")("chat");
var app = require("../app");
var socketio = require("socket.io");
var clients = {};
app.set("port", process.env.PORT || 3000);

var server = app.listen(app.get("port"), function() {
	console.log("Express server listening on port " + app.get("port"));
	console.log("Site live at http://localhost:" + app.get("port"));
});
var io = socketio.listen(server);
io.sockets.on("connection", function(socket) {
	// CHAT
	socket.emit("get username", {
		id: socket.id,
		username: clients[socket.id],
		users: Object.keys(clients),
		clients: clients
	});

	socket.on("chat message", function(msg) {
		var ip = socket.request.socket.remoteAddress,
			id = socket.id;
		io.emit("chat message", clients[socket.id] + ": " + msg);
	});

	socket.on("set username", function(info) {
		clients[socket.id] = info.username;
		if (info.first == true) {
			io.emit("client connected", {
				id: socket.id,
				username: clients[socket.id],
				users: Object.keys(clients)
			});
		}
		io.emit("change username", {
			id: socket.id,
			username: clients[socket.id],
			users: Object.keys(clients)
		});
	});

	socket.on("disconnect", function() {
		io.emit("client disconnected", {
			id: socket.id,
			username: clients[socket.id],
			users: Object.keys(clients)
		});
		// remove client
		delete clients[socket.id];
	});

	function getUsersList() {
		this.list = {};
		var keys = Object.keys(clients);
		for (key in keys) {
			this.list.push(clients[key]);
		}
		return this.list;
	}

	function User(id, name) {
		this.id = Id;
		this.name = Name;
	}

	// TIC TAC TOE
	socket.on("player move", function(pos) {
		socket.broadcast.emit("player move", pos);
	});
});
